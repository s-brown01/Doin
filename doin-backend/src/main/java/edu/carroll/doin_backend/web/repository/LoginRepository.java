package edu.carroll.doin_backend.web.repository;

import java.util.List;

import edu.carroll.doin_backend.web.model.User;
import org.springframework.data.jpa.repository.JpaRepository;


public interface LoginRepository extends JpaRepository<User, Integer> {
  /**
   * Finds a list of users by their username, ignoring case.
   * <p>
   * This method is autogenerated by Spring, but it will find all users with the username 
   * that matches the username parameter entered into the method. Assuming usernames have 
   * to be unique, the list should be only 1 User long.
   * </p>
   *
   * @param username the username to search for, case-insensitive.
   * @return a list of {@link User} objects that match the given username, ignoring case.
   */
  List<User> findByUsernameIgnoreCase(String username);

  /**
   * Finds a list of users whose username contains the given substring, ignoring case.
   * <p>
   * This method is autogenerated by Spring Data JPA. It searches for users whose
   * usernames contain the provided substring, regardless of case. This allows partial
   * matching of usernames, making it useful for search functionalities where a
   * user might enter part of a username and still find relevant results.
   * </p>
   *
   * @param username the substring to search for in usernames, case-insensitive.
   * @return a list of {@link User} objects whose username contains the given substring,
   *         ignoring case.
   */
  List<User> findByUsernameContainingIgnoreCase(String username);

}
