package edu.carroll.doin_backend.web.repository;

import edu.carroll.doin_backend.web.enums.FriendshipStatus;
import edu.carroll.doin_backend.web.model.Friendship;
import edu.carroll.doin_backend.web.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
import java.util.Set;

/**
 * Repository interface for managing {@link Friendship} entities and related operations.
 * Extends {@link JpaRepository} to provide CRUD and custom query methods for {@link Friendship}.
 * <p>
 * These methods are primarily auto-generated by the Spring Data JPA framework, allowing for seamless
 * interaction with the database. Custom queries can also be defined using JPQL or native SQL if necessary.
 * </p>
 */
public interface FriendRepository extends JpaRepository<Friendship, Integer> {
    /**
     * Retrieves all friendships where the specified user is the friend and the friendship status matches the given status.
     * <p>
     * This method is auto-generated by Spring Data JPA based on the method name convention.
     * </p>
     *
     * @param user   the user who is the friend in the relationship
     * @param status the status of the friendship (e.g., CONFIRMED, PENDING)
     * @return a {@link Set} of {@link Friendship} objects that match the criteria
     */
    Set<Friendship> findByFriendAndStatus(User user, FriendshipStatus status);
    /**
     * Retrieves all friendships where the specified user is the user and the friendship status matches the given status.
     * <p>
     * This method is auto-generated by Spring Data JPA based on the method name convention.
     * </p>
     *
     * @param user   the user who is the main user in the relationship
     * @param status the status of the friendship (e.g., CONFIRMED, PENDING)
     * @return a {@link Set} of {@link Friendship} objects that match the criteria
     */
    Set<Friendship> findByUserAndStatus(User user, FriendshipStatus status);
    /**
     * Retrieves all friendships where the specified user is involved (either as user or friend).
     * <p>
     * This method is auto-generated by Spring Data JPA based on the method name convention.
     * </p>
     *
     * @param user the user involved in the friendships (either as the user or the friend)
     * @return a {@link Set} of {@link Friendship} objects for the specified user
     */
    Set<Friendship> findByUser(User user);
    /**
     * Checks whether a friendship exists between the specified user and friend.
     * <p>
     * This method is auto-generated by Spring Data JPA based on the method name convention.
     * </p>
     *
     * @param user   the user involved in the potential friendship
     * @param friend the other user to check the friendship status with
     * @return true if a friendship exists between the specified users, false otherwise
     */
    boolean existsFriendshipByUserAndFriend(User user, User friend);
    /**
     * Retrieves the friendship object for the specified user and friend.
     * <p>
     * This method is auto-generated by Spring Data JPA based on the method name convention.
     * </p>
     *
     * @param user   the user involved in the friendship
     * @param friend the other user involved in the friendship
     * @return the {@link Friendship} object representing the friendship, or null if no friendship exists
     */
    Friendship findByUserAndFriend(User user, User friend);

}
