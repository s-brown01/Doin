package edu.carroll.doin_backend.web.repository;

import edu.carroll.doin_backend.web.model.SecurityQuestion;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface SecurityQuestionRepository extends JpaRepository<SecurityQuestion, Integer> {
    /**
     * Finds a list of security questions by their id.
     * <p>
     * This method is autogenerated by Spring, but it will find all SecurityQuestions with the id that matches the id parameter. The id is the primary key, so the returned list will be at most length = 1.
     * </p>
     *
     * @param question the question to search for
     * @return a list of {@link SecurityQuestion} objects that have matching id's with the id parameter.
     */
    List<SecurityQuestion> findByQuestion(String question);

    /**
     * Retrieves the ID of the {@link SecurityQuestion} entity based on the provided question.
     * <p>
     * This method executes a custom JPQL query that selects the ID field from the {@link SecurityQuestion}
     * entity where the question matches the provided question parameter.
     * </p>
     *
     * <p>
     * This method was created with help from ChatGPT on how to create a custom query in a JpaRepository.
     * </p>
     *
     * @param question the security question text to search for
     * @return the ID of the {@link SecurityQuestion} entity that matches the given question,
     *         or {@code null} if no matching entity is found
     */
    @Query("SELECT sq.id FROM SecurityQuestion sq WHERE sq.question = :question")
    Integer findIdByQuestion(@Param("question") String question);


    boolean existsByQuestion(String question);
}
